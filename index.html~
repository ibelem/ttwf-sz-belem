<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Test the Web Forward</title>
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link rel="stylesheet" href="css/reveal.min.css">
    <link rel="stylesheet" href="css/theme/default.css" id="theme">
    <link rel="stylesheet" href="lib/css/zenburn.css">
    <script>
      document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    </script>
    <!--[if lt IE 9]>
    <script src="lib/js/html5shiv.js"></script>
    <![endif]-->
  </head>
  <body>
    <div class="reveal">
      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">
        <section>
          <h1>How to Read W3C Specifications</h1>
          <!-- <img class="plain" src="assets/images/w3cLogo.png"> -->
          <p>
            <i><a href="mailto:belem.zhang@intel.com">Belem Zhang</a>, Intel</i>
          </p>
        </section>
        <section>
          <section>
            <h2>A specification is not a user manual</h2>
            <p>
            <ul style="line-height:40px">
              <li>Written for implementers, not end users</li>
              <li>The only documentation with the latest technology</li>
              <li>Pick random sections from contents list</li>
              <li>Follow all the cross-references</li>
            </ul>
          </section>
          <section>
            <h2>Find The W3C Specifications</h2>
            <p>
              <a href="http://www.w3.org/TR/">http://www.w3.org/TR/</a>
            <p>
              <img src="assets/images/spec-01.png" alt="ALL W3C STANDARDS AND DRAFTS" />
          </section>
          <section>
            <h2>The structure of specifications</h2>
            <p>
            <ul style="line-height:40px">
              <li>A section that tells <a href="http://www.w3.org/TR/html5/introduction.html#structure-of-this-specification">how each spec is put together</a></li>
            </ul>
            <img src="assets/images/spec-02a.png" alt="How to read W3C specification" />
          </section>
          <section>
            <h2>The structure of specifications</h2>
            <p>
            <ul style="line-height:40px">
              <li>A section that tells <a href="http://www.w3.org/TR/html5/introduction.html#how-to-read-this-specification" title="HTML5 Spec: how-to-read-this-specification">how to read the specification</a></li>
            </ul>
            <img src="assets/images/spec-02.png" alt="How to read W3C specification" />
          </section>
          <section>
            <h2><abbr title="Request For Comment - RFC2119">Key words</abbr> for use</h2>
            <ul>
              <li>
                MUST, REQUIRED, SHALL
                <ul>
                  <li><em>absolute requirement</em></li>
                </ul>
              </li>
              <li>
                MUST NOT, SHALL NOT
                <ul>
                  <li><em>absolute prohibition</em></li>
                </ul>
              </li>
              <li>
                SHOULD, RECOMMENDED
                <ul>
                  <li><em>can be implemented</em></li>
                  <li><em>have a good reason for not doing</em></li>
                </ul>
              </li>
              <li>
                SHOULD NOT
                <ul>
                  <li><em>have a good reason for doing</em></li>
                </ul>
              </li>
            </ul>
          </section>
          <section>
            <h2>Words for the Wise / Learning</h2>
            <ul>
              <li><dfn>normative</dfn> <em>this section is normative</em></li>
              <li><dfn>non-normative</dfn> <em>not testable sections</em></li>
              <li><dfn>user agent</dfn></li>
              <li><a href="http://www.ietf.org/rfc/rfc2119.txt" title="request for comment"><dfn>RFC</dfn></a> <em>this is considered "normative language"</em></li>
              <li><a href="http://www.w3.org/TR/WebIDL/"><dfn>IDL</dfn></a> <em>interface definition language</em></li>
            </ul>
          </section>
        </section>
        <section>
          <section>
            <h2>Sample</h2>
            <img src="assets/images/spec-03.png" alt="4.10.7.1.8 Date state (type=date)" />
            <br/>
            <a href="http://www.w3.org/TR/html5/forms.html#date-state-(type=date)">4.10.7.1.8 Date state (type=date)</a>
            <blockquote style="text-align: left; padding: 10px 0px;">
              User agents <em>must not</em> allow the user to set the <code>value</code> to a non-empty string that is not a valid date string.
            </blockquote>
          </section>
          <section>
            <h3>Product</h3>
            <p>
            <blockquote style="text-align: left; padding: 10px 0px;">
              <span style="color: #e67e22; text-decoration: underline;">User agents</span> <em>must not</em> allow the user to set the <code>value</code> to a non-empty string that is not a valid date string.
            </blockquote>
          </section>
          <section>
            <h3>Strictness level</h3>
            <p>
            <blockquote>
              User agents <em style="color: #e67e22; text-decoration: underline;">must not</em> allow the user to set the <code>value</code> to a non-empty string that is not a valid date string.
            </blockquote>
          </section>
          <section>
            <h3>Prerequisites</h3>
            <p>
            <blockquote>
              User agents <em>must not</em> allow the user to set the <code>value</code> to a non-empty string that <span style="color: #e67e22; text-decoration: underline;">is not a valid date string</span>.
            </blockquote>
          </section>
          <section>
            <h3>Behaviour</h3>
            <p>
            <blockquote>
              User agents <em>must not</em> allow the user to <span style="color: #e67e22; text-decoration: underline;">set the <code>value</code> to a non-empty string</span> that is not a valid date string.
            </blockquote>
          </section>
          <section>
            <h3>Defined Terms</h3>
            <p>
            <blockquote>
              User agents <em>must not</em> allow the user to <span style="color: #e67e22; text-decoration: underline;">set</span> the <code>value</code> to a <span style="color: #e67e22; text-decoration: underline;">non-empty string</span> that is not a <span style="color: #e67e22; text-decoration: underline;">valid</span> date string.
            </blockquote>
          </section>
          <section>
            <h3>Mapping to code</h3>
            <p>
            <p style="text-align: left; padding: 10px 0px;">
              User agents <em>must not</em> allow the user to set the <code>value</code> to a non-empty string that is not a valid date string.
            </p>
            <pre>
                      <code class="html" style="font-size:28px;">
&lt;input id="invalid" type="date" value="invalid_value"&gt;
&lt;script&gt;
  console.log(document.querySelector("#invalid").value == "");
&lt;/script&gt;
                      </code>
                      </pre>
          </section>
        </section>
        <section>
          <h2>Language issue</h2>
          <ul>
            <li><a href="http://www.w3.org/html/ig/zh/wiki/%E8%BE%AD%E5%BD%99%E8%A1%A8/%E8%AF%8D%E6%B1%87%E8%A1%A8_-_%E7%B9%81%E9%AB%94%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E5%AF%B9%E7%85%A7%E7%89%88">W3C 文档规范术语表</a></li>
            <li><a href="http://www.w3.org/TR/html5/forms.html#the-form-element">English: HTML5 form element</a></li>
            <li><a href="http://www.w3.org/html/ig/zh/wiki/HTML5/forms#the-form-element">Chinese: HTML5 form 元素</a></li>
          </ul>
        </section>
        <section>
          <em>Be patient, pedantic, persistent and thorough.</em>
        </section>
        <section>
          <h1>Using testharness.js</h1>
        </section>
        <section>
          <section>
            <h2>testharness</h2>
            <p style="font-size:24px"><code>testharness.js</code> and <code>testharnessreport.js</code></p>
            <pre>
							<code class="html" style="font-size:28px;">
&lt;script src="/resources/testharness.js"&gt;&lt;/script&gt;
&lt;script src="/resources/testharnessreport.js"&gt;&lt;/script&gt;
							</code>
						</pre>
	    <ul>
              <li>A framework to simplify and standardize JS test creation</li>
 	      <li>In the resources directory as subrepo in both the <a href="http://testthewebforward.org/docs/github-101.html#clone">CSS and WPT test repos</a></li>
	      <li>You can simply create a symlink from /resources [TBD]</li>
	    </ul>
          </section>
          <section>
            <ul>
              <li>JavaScript API for making common test assertions</li>
              <li>Should be used by all JavaScript tests</li>
              <li>
                Path must be to <code>/resources</code> directory at root level
                <ul>
                  <li>Locally, resources directory can be located anywhere</li>
                </ul>
              </li>
              <li>
                Element with <code>id="log"</code> should exist in test file
                <ul>
                  <li>Test results table will be added to this element, if it exists</li>
                </ul>
              </li>
            </ul>
          </section>
        </section>
        <section>
          <section>
            <h2>The test() function</h2>
            <p>
            <pre>
							<code class="html javascript" style="font-size:28px; text-align: center;">
test(test_function, name, properties)
							</code>
						</pre>
            <ul style="line-height:40px">
              <li>
                Used for synchronous tests
                <ul>
                  <li><code>async_test()</code> is also defined by <code>testharness.js</code> for asychronous testing</li>
                </ul>
              </li>
              <li>Documented and implemented in <code>testharness.js</code></li>
              <li>
                Used to define an individual test case in a file
                <ul>
                  <li>Common for a file to have multiple calls to <code>test()</code></li>
                </ul>
              </li>
              <li><code>testharness.js</code> will display PASS/FAIL for each call to <code>test()</code></li>
            </ul>
          </section>
          <section>
            <h2>test() Argument 1: test_function</h2>
            <p>
            <pre>
							<code class="html javascript" style="font-size:28px; text-align: center;">
test(test_function, name, properties)
							</code>
						</pre>
            <ul style="line-height:40px">
              <li><code>test_function</code> must be an object, not a function call</li>
              <li>
                <code>test_function</code> should be testharness assert method
                <ul>
                  <li>Can also be user defined if no assert method provides the needed functionality</li>
                </ul>
              </li>
              <li>Result from the assertion will determine PASS/FAIL</li>
              <li>Usage example:</li>
            </ul>
            <pre>
								  <code class="html javascript" style="font-size:28px; text-align: center;">
test(function() { assert_true(true) }, name, properties)
								  </code>
							  </pre>
          </section>
          <section>
            <h2>test() Argument 2: Name</h2>
            <pre>
							  <code class="html javascript" style="font-size:28px; text-align: center;">
		test(test_function, name, properties)
							  </code>
						  </pre>
            <ul style="line-height:40px">
              <li><code>name</code> is a string that identifies the test</li>
              <li><code>name</code> should be short, unique, and must not change</li>
              <li><code>name</code> will be displayed in the test results table</li>
              <li>Usage example:</li>
            </ul>
            <pre>
								  <code class="html" style="font-size:28px; text-align: center;">
test(function() { assert_true(true) }, "test_name", properties)
								  </code>
							  </pre>
          </section>
          <section>
            <h2>test() Argument 3: Properties</h2>
            <pre>
							  <code class="html javascript" style="font-size:28px; text-align: center;">
		test(test_function, name, properties)
							  </code>
						  </pre>
            <ul style="line-height:40px">
              <li><code>properties</code> is an object that overrides defaults</li>
              <li><code>properties</code> is an optional argument</li>
              <li>Recognized properties include <code>timeout</code> and metadata</li>
              <li>Usage example:</li>
            </ul>
            <pre>
								  <code class="html javascript" style="font-size:28px; ">
test(function() { assert_true(true) }, 
  "test_name", 
  { timeout:1000, assert: 'This should always be true.' }
)
								  </code>
							  </pre>
          </section>
        </section>
        <section>
          <section>
            <h2>Assert methods</h2>
            <ul style="line-height:40px">
              <li>
                <code>testharness.js</code> provides a number of assert methods
                <ul>
                  <li>Full list is provided in the comment section of <code>testharness.js</code></li>
                  <li>Typically used in the <code>test_function</code> for <code>test()</code></li>
                </ul>
              </li>
              <li>
                All assert methods contain an optional <code>description</code> argument that is only output if the assertion fails
                <ul>
                  <li>Used to provide additional debug information</li>
                </ul>
              </li>
              <li>
                All asserts must be located in a call to <code>test()</code>
                <ul>
                  <li>asserts outside won't be detected correctly by the harness and may cause a file to stop testing</li>
                </ul>
              </li>
            </ul>
          </section>
          <section>
            <h2>Assert Example</h2>
            <pre>
							  <code class="html" style="font-size:28px">
assert_equals(actual, expected, description)
							  </code>
						  </pre>
            <ul style="line-height:40px">
              <li><code>actual</code>: The actual value from the functionality being tested</li>
              <li><code>expected</code>: The expected value</li>
              <li><code>description</code> (optional): Output only if the assertion fails</li>
              <li>Usage example:</li>
            </ul>
            <pre>
							  <code class="html" style="font-size:20px">
assert_equals(getActualData("myElement"), 100, "Expected value for myElement is 100")
							  </code>
						  </pre>
          </section>
        </section>
        <section>
          <h2>Sample Test Case</h2>
          API test for the date value of form element described in the HTML5 spec.
          <img src="assets/images/spec-03.png" alt="4.10.7.1.8 Date state (type=date)" />
          <blockquote style="text-align: left; padding: 10px 0px;">
            User agents <em>must not</em> allow the user to set the <code>value</code> to a non-empty string that is not a valid date string.
          </blockquote>
	  <ul style="line-height:40px">
            <li><a href="http://www.w3.org/TR/html5/forms.html#date-state-(type=date)">html5/forms.html#date-state-(type=date)</a></li>
	    <li>Get <a href="http://testthewebforward.org/docs/test-templates.html">Script Test Templates</a></li>
	  </ul>
        </section>
        <section>
          <section>
            <h2>METADATA</h2>
            <pre>
                        <code class="html" style="font-size:28px">
&lt;head&gt;
  &lt;meta charset='utf-8'&gt;
  &lt;title&gt;HTML Test: Forms date state&lt;/title&gt;
  &lt;link rel='author' title='your mame' href='mailto:youremail@address.com'&gt;
  &lt;link rel='help' href='http://www.w3.org/html/wg/drafts/html/CR/forms.html#date-state-(type=date)'&gt;
  &lt;meta name='flags' content=''&gt;
  &lt;meta name='assert' content='Test checks that [explanation].'&gt;
  ...
&lt;/head&gt;
                        </code>
                      </pre>
            <ul>
              <li><a href="http://testthewebforward.org/docs/test-templates.html#requirement-flags">Flags</a> document the test’s prerequisites </li>
              <li>Leave flags content as "" if no tokens match the test</li>
            </ul>
          </section>
          <section>
            <h2>METADATA</h2>
            <pre>
                        <code class="html" style="font-size:28px">
&lt;head&gt;
  ...
  &lt;script src='/resources/testharness.js'&gt;&lt;/script&gt;
  &lt;script src='/resources/testharnessreport.js'&gt;&lt;/script&gt;
&lt;/head&gt;
                        </code>
                      </pre>
            <ul>
              <li><code>testharness.js</code> and <code>testharnessreport.js</code> imported</li>
              <li>Path to both scripts points at <code>/resources</code> directory at root level</li>
            </ul>
          </section>
          <section>
            <h2>BODY</h2>
            <pre>
                        <code class="html" style="font-size:24px">
&lt;body&gt;
    &lt;div id="myDiv" style="display: none"&gt;
      &lt;input id="invalid_value" type="date" value="invalid-date"&gt;
    &lt;/div&gt;
    &lt;div id="log"&gt;&lt;/div&gt;    
    &lt;script&gt;
        test(function() {
          assert_equals(document.getElementById("invalid_value").value, "");
        },
        "User agents must not allow the user to set the value to"
        + " a non-empty string that is not a valid date string.");
    &lt;/script&gt;
&lt;/body&gt;			     
                        </code>
                      </pre>
            <ul>
              <li><code>myDiv</code> div used as test element - translate applied in JS</li>
              <li><code>log</code> div used as container for test results</li>
              <li><code>test()</code> uses <code>assert_equals</code> as <code>test_function</code></li>
              <li><code>assert_equals</code> actual argument supplied by API call</li>
            </ul>
          </section>
          <section>
            <h2>Completed File</h2>
            <pre>
						   <code class="html" style="font-size:18px">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title>HTML Test: Forms date state&lt;/title&gt;
    &lt;link rel='author' title='your mame' href='mailto:youremail@address.com'&gt;
    &lt;link rel='help' href='http://www.w3.org/html/wg/drafts/html/CR/forms.html#date-state-(type=date)'&gt;
    &lt;script src='/resources/testharness.js'>&lt;/script&gt;
    &lt;script src='/resources/testharnessreport.js'>&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="myDiv" style="display: none"&gt;
      &lt;input id="invalid_value" type="date" value="invalid-date"&gt;
    &lt;/div&gt;
    &lt;div id="log"&gt;&lt;/div&gt;    
    &lt;script&gt;
        test(function() {
          assert_equals(document.getElementById("invalid_value").value, "");
        },
        "User agents must not allow the user to set the value to"
        + " a non-empty string that is not a valid date string.");
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</code>
					   </pre>
          </section>
        </section>
        <section>
          <h2>Test Result</h2>
          <h3><a href="tests/test.html">PASS</a></h3>
          <img src="assets/images/test-01.png" alt="Test Pass" />
        </section>
        <section>
          <br><br>
          <h2>Congratulations!</h2>
          <br><br>
          <p class="font1">You have completed a W3C JavaScript Test.</p>
        </section>
        <section>
          <h2>Thanks!</h2>
        </section>
        <section>
          <h2>References</h2>
          <ul>
            <li><a href="http://alistapart.com/article/readspec">How to Read W3C Specs</a> by J. David Eisenberg </li>
            <li><a href="http://berjon.com/">How to Read a Spec</a> by Robin Berjon</li>
            <li><a href="http://adobe.github.io/web-platform/presentations/test-the-web-forward-overview/index.html">Test the Web Forward Overview</a></li>
	    <li><a href="http://testthewebforward.org/docs/testharness-tutorial.html">Test Harness Tutorial</a> adapted from Robin Berjon's <a href="http://darobin.github.io/test-harness-tutorial/docs/using-testharness.html">using-testharness.js</a></li>
          </ul>
        </section>
      </div>
    </div>
    <script src="lib/js/head.min.js"></script>
    <script src="js/reveal.min.js"></script>
    <script>
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      	controls: true,
      	progress: true,
      	history: true,
      	center: true,
      
      	theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
      	transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none
      
      	// Optional libraries used to extend on reveal.js
      	dependencies: [
      		{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      		{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      		{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      		{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
      		{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      		{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
      	]
      });
      
    </script>
  </body>
</html>
